/[1-9]/ {lval.n, _ = strconv.Atoi(yylex.Text()); println(lval.n, " and ", DIGIT1to9); return DIGIT1to9}
/[0-9]/	{lval.s = yylex.Text(); println(lval.s, " and ", DIGIT); return DIGIT}
/{DIGIT}+/	{lval.s = yylex.Text(); println(lval.s, " and ", DIGITS); return DIGITS}
/{DIGIT}|{DIGIT1to9}{DIGITS}|-{DIGIT}|-{DIGIT1to9}{DIGITS}/	{lval.s = yylex.Text(); println(lval.s, " and ", INT); return INT}
/[.]{DIGITS}/	{lval.s = yylex.Text(); println(lval.s, " and ", FRAC); return FRAC}
/{E}{DIGITS}/	{lval.s = yylex.Text(); println(lval.s, " and ", EXP); return EXP}
/[eE][+-]?/	{lval.s = yylex.Text(); println(lval.s, " and ", E); return E}
/[0-9a-f]/	{lval.s = yylex.Text(); println(lval.s, " and ", HEX_DIGIT); return HEX_DIGIT}
/{INT}|{INT}{FRAC}|{INT}{EXP}|{INT}{FRAC}{EXP}/	{lval.s = yylex.Text(); println(lval.s, " and ", NUMBER); return NUMBER}
/[-!#-\[\]-~]/	{lval.s = yylex.Text(); println(lval.s, " and ", UNESCAPEDCHAR); return UNESCAPEDCHAR}
/\\["\\bfnrt\/]/	{lval.s = yylex.Text(); println(lval.s, " and ", ESCAPEDCHAR); return ESCAPEDCHAR}
/\\u{HEX_DIGIT}{HEX_DIGIT}{HEX_DIGIT}{HEX_DIGIT}/	{lval.s = yylex.Text(); println(lval.s, " and ", UNICODECHAR); return UNICODECHAR}
/{UNESCAPEDCHAR}|{ESCAPEDCHAR}|{UNICODECHAR}/	{lval.s = yylex.Text(); println(lval.s, " and ", CHAR); return CHAR}
/{CHAR}+/	{lval.s = yylex.Text(); println(lval.s, " and ", CHARS); return CHARS}
/["]/	{lval.s = yylex.Text(); println(lval.s, " and ", DBL_QUOTE); return DBL_QUOTE} 
//
package main
import ("os";"strconv"; "fmt")

func main(){
    for {
       v := new(yySymType)
       NewLexer(os.Stdin).Lex(v)
       fmt.Printf("%d %s\n", v.n, v.s)
    }
}
